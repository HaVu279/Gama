experiment "Tests for msi.gama.core" type: test {

	test "Operator between" {
		assert 0.0 between(-2,4);
		assert -12.5 between(-22.0,-10.0);
		assert not(1.0 between(1.0,4.0));
		assert not(2.2 between(4.0,1.9));
	}

	test "Operator between (1)" {
		assert 0 between(-2,4) = true;
		assert -12 between(-22,-10);
		assert not(1 between(1,4));
		assert not(2 between(4,1));
	}


	test "Operator +" {
		assert {1, 2} + {4, 5} = {5,7};
		point p <- {1, 2};
		assert  p + {0, 0} = p warning: true;
	}

	test "Operator /" {
		assert {2,5} / 4 = {0.5,1.25};
		assert is_error({2,5} / 0);
	}

	test "Operator *" {
		assert {2,5} * 4.0 = {8.0,20.0};
		assert {2,5} * 0.0 = {0.0,0.0};
	}

	test "Regular and Not" {
		assert norm({3,4}) = 5.0;
		assert norm({1,1}) = sqrt(2);
		assert norm({0,0}) = 0.0;
		assert norm({1,0}) = norm({0,1});
	}

	test "Operator * (1)" {
		assert {2,5} * 4 = {8,20};
		assert {2,5} * 0 = {0,0};
	}

	test "Operator * (2)" {
		assert {2,5} * {4.5, 5} = 34.0;
	}

	test "Operator / (5)" {
		assert {5, 7.5} / 2.5 = {2,3};
	}


	test "Operator / (1)" {
		assert 0/1=0;
		assert is_error(1/0);
		assert 3/5=0.6;
	}

	test "Operator / (2)" {
		assert 0.2/2=0.1;
		assert is_error(1.5/0);
		assert 0.0/5=0.0;
	}

	test "Operator acos" {
		assert acos(0.0) = 90.0;
		assert acos(-1.0) = 180.0;
		assert acos(1.0) = 0.0;
		assert not(is_number(acos(-10.0)));
		assert not(is_number(acos(10.0)));
	}

	test "Operator ^" {
		assert 4.0^2 = 16.0;
		assert 4.0^0.5 = 2.0;
		assert 8^0 = 1.0;
		assert 8.0^0 = 1.0;
		assert 8.0^1 = 8.0;
		assert 8^1.0 = 8.0;
		assert 2^0.5 = sqrt(2);
		assert 8.0^1.0 = 8.0;
		assert 16.81^0.5 = sqrt(16.81);
	}

	test "Operator asin" {
		assert asin(0) = 0.0;
		assert asin(-1) = -90.0;
		assert asin(1) = 90.0;
		assert not(is_number(asin(-10)));
		assert not(is_number(asin(10)));
	}

	test "Operator abs" {
		assert abs(1.7) = 1.7;
		assert abs(-2.0) = 2.0;
		assert abs(0.0) = 0.0;
		assert abs(-0.0) = 0.0;
	}

	test "Operator atan" {
		assert atan(0) = 0.0;
		assert atan(-1) = -45.0;
		assert atan(1) = 45.0;
	}

	test "Operator asin (1)" {
		assert asin(0.0) = 0.0;
		assert asin(-1.0) = -90.0;
		assert asin(1.0) = 90.0;
		assert not(is_number(asin(-10.0)));
		assert not(is_number(asin(10.0)));
	}

	test "Operator abs (1)" {
		assert abs(1) = 1;
		assert abs(-2) = 2;
		assert abs(0) = 0;
		assert abs(-0) = 0;
	}

	test "Operator acos (1)" {
		assert acos(0) = 90.0;
		assert acos(-1) = 180.0;
		assert acos(1) = 0.0;
		assert not(is_number(acos(-10)));
		assert not(is_number(acos(10)));
	}

	test "Operator / (3)" {
		assert 1/0.5=2.0;
		assert is_error(2/0.0);
		assert 0/0.3=0.0;
	}

	test "Operator / (4)" {
		assert 0.2/0.5=0.4;
		assert is_error(1.5/0.0);
		assert 0.0/1.0=0.0;
	}


	test "Operator + (1)" {
		assert (circle(5) + 5).height with_precision 1 = 20.0;
		assert (circle(5) + 5).location with_precision 9 = (circle(10)).location with_precision 9;
	}

	test "Operator + (2)" {
		assert (circle(5) + (5,32)).height with_precision 5 = 20.0;
	}

	test "Operator + (3)" {
		assert (circle(5) + (5,32,#round)).height with_precision 5 = 20.0;
	}


	test "Operator plus_weeks" {
		assert is_error(date('2000-15-01'));
	}

}